includeConfig 'conf/base.config'
includeConfig 'params.config'

profiles {
  local {
    process.conda = "$baseDir/environment.yml"
    docker.enabled = false
    singularity.enabled = false
    trace.enabled = false
    process {
      withName:analyze_parquet_files {
        label = 'process_low'
      }
      withName:run_file_download_stat {
        label = 'process_low'
      }
    }
  }
  ebislurm {
    executor {
            name = "slurm"
            queueSize = 1000
            submitRateLimit = "10/1sec"
            exitReadTimeout = "30 min"
            queueGlobalStatus = true
            jobName = {
                "NF-$task.name-$task.hash" // [] and " " not allowed in lsf job names
                .replace("[", "(")
                .replace("]", ")")
                .replace(" ", "_")
            }
         }
    conda.enable = true
    docker.enabled = false
    singularity.enabled = false
    trace.enabled = false
    process {
      conda = "$baseDir/environment.yml"
      time = '24h'
      withName:analyze_parquet_files {
        cpus   = { check_max( 4    * task.attempt, 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
      }
      withName:run_file_download_stat {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
      }
      withName:update_file_level_download_counts {
        label = 'memory_high'
      }
    }
  }
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}